<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2013-10-03 04:28"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Blog title</title>
<link>http://johanilsson.wordpress.com</link>
<description/>
<pubDate>Thu, 03 Oct 2013 04:28:15 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://johanilsson.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>authorlogin</wp:author_login>
  <wp:author_email>author@email.com</wp:author_email>
  <wp:author_display_name><![CDATA[johanilsson]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>Blog title</title>
		<link>http://johanilsson.wordpress.com</link>
	</image>
	<item>
  <title>Blog entry title</title>
  <link>http://johanilsson.wordpress.com/2012/04/09/recursive-traversing-of-pocos/</link>
  <pubDate>Mon, 09 Apr 2012 04:33:08 +0000</pubDate>
  <dc:creator>itemcreator</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/04/09/recursive-traversing-of-pocos/</guid>
  <description/>
  <content:encoded><![CDATA[<p>Blog entry content</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>2012-04-09 00:33:08</wp:post_date>
  <wp:post_date_gmt>2012-04-09 04:33:08</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>post-name</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="net"><![CDATA[Rant]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/20747504329/recursive-traversing-of-pocos]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[20747504329]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[20747504329]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A few caveats when using Strings in .Net</title>
  <link>http://johanilsson.wordpress.com/2012/02/23/a-few-caveats-when-using-strings-in-net/</link>
  <pubDate>Fri, 24 Feb 2012 00:39:49 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/02/23/a-few-caveats-when-using-strings-in-net/</guid>
  <description/>
  <content:encoded><![CDATA[<div align="justify">Strings in .Net are class objects and unlike value types they are stored on the heap.</div>
<div align="justify"></div>
<div align="justify">According to msdn: <a href="http://msdn.microsoft.com/en-us/library/ee787088.aspx" target="_blank"><a href="http://msdn.microsoft.com/en-us/library/ee787088.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ee787088.aspx</a></a></div>
<div align="justify">
<blockquote>

<p>Garbage collection occurs when one of the following conditions is true:</p>
<ul><li>
<p>The system has low physical memory.</p>
</li>
<li>
<p>The memory that is used by allocated objects on the managed heap surpasses an acceptable threshold. This means that a threshold of acceptable memory usage has been exceeded on the managed heap. This threshold is continuously adjusted as the process runs.</p>
</li>
<li>
<p>The <a href="http://msdn.microsoft.com/en-us/library/system.gc.collect.aspx" target="_blank">GC<span>.</span>Collect</a> method is called. In almost all cases, you do not have to call this method, because the garbage collector runs continuously. This method is primarily used for unique situations and testing.</p>
</li>
</ul></blockquote>
</div>
<div align="justify"></div>
<div align="justify">Due to the second condition creating a string object can trigger garbage collection, which is costly in terms of performance. As developers we want to keep the string creation to a minimum. Since strings in .Net are immutable (cannot be edited) means that combining two strings &#8220;string1&#8221; + &#8220;string2&#8221; results in the creation of three strings and editing a string results in creating a new one with the modification.</div>
<div align="justify"></div>
<div align="justify">I think it&#8217;s good to have the knowledge about how things work and why even though it&#8217;s considered an micro optimization.</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2012-02-23 20:39:49</wp:post_date>
  <wp:post_date_gmt>2012-02-24 00:39:49</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-few-caveats-when-using-strings-in-net</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/18144118934/a-few-caveats-when-using-strings-in-net]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[18144118934]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[18144118934]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Why you'd want to place a shared library in its own solution</title>
  <link>http://johanilsson.wordpress.com/2012/02/18/why-youd-want-to-place-a-shared-library-in-its-own/</link>
  <pubDate>Sat, 18 Feb 2012 22:10:32 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/02/18/why-youd-want-to-place-a-shared-library-in-its-own/</guid>
  <description/>
  <content:encoded><![CDATA[<p>A situation occurred on work where we decided to refactor duplicated funtionality from two project (A and B) into a new shared library (X) DRYing things up. During this process the question of where to put X came up. I quickly answered &#8220;It&#8217;s own solution&#8221; whereupon my colleague countered with the very simple yet valid question &#8220;Why&#8221; and I answered &#8221;Because&#8221; thinking it was really obvious and at the time couldn&#8217;t understand why he&#8217;d even ask.</p>
<p>After work I realized this was a childish and not a very helpful answer caused by me just knowing it was a good thing to do and have never reflected upon the reason for it. So I decided to gather my thoughts and write this blog giving a better answer to his valid question.</p>
<p><strong>Presumptions</strong></p>
<p>We will use internal Nuget feed for the library.</p>
<p>X could be placed in either A or B or separate library.</p>
<p><strong>Consuming the Library</strong></p>
<p>Placing it in its own solution forces all projects consume it the same way, otherwise some projects would use nuget and one could use project reference. </p>
<p><strong>Future Changes</strong></p>
<p>If placed in A it would be easy to change according to requirement or quick fix for A and not think about B or any future consumers. Placing it in its own solution forces it to behave more like an independent library and less like a project reference. It makes more sense to open the solution for the library when change is needed than to open an unrelated solution containing the library.</p>
<p><strong>Unrelated Functionality</strong></p>
<p>Since the functionality is general and not related to neither A nor B, placing it in the same solution just because it&#8217;s consumed by them is not a valid argument.</p>
<p><strong>Versioning</strong></p>
<p>The library has different release/deploy cycles than the consumers and using Nuget allows for choosing what version and if/when to upgrade. Different consumers can easily consume different versions of the library. </p>
<p><strong>YAGNI</strong></p>
<p>YAGNI was mentioned as an argument against placing X in its own library. I think developers are to fast to throw abbreviations as arguments thinking they are valid without actually considering the situation at hand, but this is material for a future post.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>6</wp:post_id>
  <wp:post_date>2012-02-18 18:10:32</wp:post_date>
  <wp:post_date_gmt>2012-02-18 22:10:32</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>why-youd-want-to-place-a-shared-library-in-its-own</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/17831694586/why-youd-want-to-place-a-shared-library-in-its-own]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[17831694586]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[17831694586]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>PhotoUtil v1.0.0.1 aka Speeding up a c# project</title>
  <link>http://johanilsson.wordpress.com/2012/01/25/photoutil-v1-0-0-1-aka-speeding-up-a-c-project/</link>
  <pubDate>Wed, 25 Jan 2012 20:48:33 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/01/25/photoutil-v1-0-0-1-aka-speeding-up-a-c-project/</guid>
  <description/>
  <content:encoded><![CDATA[<p>I was investigating why my hobby project &#8220;PhotoUtil&#8221; (can be found here: <a href="http://johanilsson.com/blog/projects/photoutil/" target="_blank">http://johanilsson.com/blog/projects/photoutil/</a>) was being slow. Following is a short recap of that procedure.</p>
<p><strong>Find out what&#8217;s taking time 1: Analyze / Launch Performance Wizard</strong></p>
<p>The first thing that popped out at me was a DateTime creation which took 100% of the CPU time (according to the performance report). I grab the DateTimeOriginal value from exif metadata of a photo and convert it into datetime, only because it allowed for cleaner code when accessing the date and time values later on in the code. Apparently parsing strings into datetime is slow, so instead I got it to work with some string manipulation.</p>
<p><strong>Find out what&#8217;s taking time 2: Analyze / Launch Performance Wizard</strong></p>
<p>When reading exif data using GDI+ from a file the whole image is read into memory using new Bitmap(Path); then the desired properties are fetched using GetProperty. This made me switch focus to increasing concurrent files being worked on (read parallelization) instead of minimizing process time of each file. With this in mind I rewrote my foreach loop into using the parallel library.</p>
<p>from foreach(var filepath in filepaths){ <br />into  Parallel<span>.ForEach(filePaths, oldFilePath =&gt; {</span></p>
<p><span><strong>Taking on step further:</strong></span></p>
<p>After finding out that the whole image is read into memory I set out to find an alternate approach of extracting EXIF data from a photo. It wasn&#8217;t long before I found a sweet project called ExifLib which only reads the Exif data portion of an image. ExifLib is a wonderful lib created by Simon McKenzie only available as source code from codeproject.com but I&#8217;m hoping to convince him to put it up on NuGet so more people can find and make use of it.</p>
<p><strong>Results</strong></p>
<p>100 images processed on an Intel Core 2 duo</p>
<p>Before optimizations: 00:00:20.8059121 </p>
<p>After optimizations:   00:00:11:4034511</p>
<p>Using ExifLib:            00:00:01.0714248</p>
<p><em>References:</em></p>
<p><em>ExifLib - <a href="http://www.codeproject.com/Articles/36342/ExifLib-A-Fast-Exif-Data-Extractor-for-NET-2-0" target="_blank">http://www.codeproject.com/Articles/36342/ExifLib-A-Fast-Exif-Data-Extractor-for-NET-2-0</a></em></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2012-01-25 16:48:33</wp:post_date>
  <wp:post_date_gmt>2012-01-25 20:48:33</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>photoutil-v1-0-0-1-aka-speeding-up-a-c-project</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/16468687674/photoutil-v1-0-0-1-aka-speeding-up-a-c-project]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[16468687674]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[16468687674]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hard tested code</title>
  <link>http://johanilsson.wordpress.com/2012/01/14/code-that-is-hard-to-be-covered-by-tests-is/</link>
  <pubDate>Sat, 14 Jan 2012 15:00:05 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/01/14/code-that-is-hard-to-be-covered-by-tests-is/</guid>
  <description/>
  <content:encoded><![CDATA[<p>Code that is hard to be covered by tests is bug-prone and need to be redesigned to be easily coverable by easy tests.</p><p>Writing a complete test suite naturally leads to good design, enforcing low coupling and high cohesion.</p><p><a href="http://codebetter.com/patricksmacchia/2012/01/10/non-trivial-and-real-world-feedbacks-on-writing-unit-tests" target="_blank">http://codebetter.com/patricksmacchia/2012/01/10/non-trivial-and-real-world-feedbacks-on-writing-unit-tests</a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>2012-01-14 11:00:05</wp:post_date>
  <wp:post_date_gmt>2012-01-14 15:00:05</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>code-that-is-hard-to-be-covered-by-tests-is</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_format" nicename="post-format-quote"><![CDATA[Quote]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15822280539/code-that-is-hard-to-be-covered-by-tests-is]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15822280539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15822280539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Review TFS 11: The things I look forward to</title>
  <link>http://johanilsson.wordpress.com/2012/01/13/review-tfs-11-the-things-i-look-forward-to/</link>
  <pubDate>Fri, 13 Jan 2012 19:55:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/01/13/review-tfs-11-the-things-i-look-forward-to/</guid>
  <description/>
  <content:encoded><![CDATA[<p>With TFS 11 around the corner (with in-place upgrade from 2010), having been rewritten with the promise of a faster and smarter experience I felt like compiling a list of the features I look forward to the most. Ordered by pain factor solving desc.</p>
<p><strong>Automerge content changes (finally)<br /></strong>Finally TFS has come to it&#8217;s senses and allows for automerge of non-conflicting content changes. </p>
<p><strong>My work pane and Search work items<br /></strong>No need for custom work item queries, work related to you will be easily available in the work item pane. Searching for items is also available here.</p>
<p><strong>Easier to transition between work items states<br /></strong>No more open work item and changing state to in progress, just right-click item in my work pane and click start.</p>
<p><strong>Suspending<br /></strong>Easier task switching by using suspend/resume. Saves visual studio state, open files and position in currently open file. Suspended tasks are listed in you work pane.</p>
<p><strong>New Pending changes page<br /></strong>Shows tree of pending changes. Allows or leaving files in excluded state without having to exclude changes every check-in (good for personalized web.config etc.).</p>
<p><strong>New built-in diff tool<br /></strong>TFS team has finally gotten around to fix the built in diff tool, which now supports more view modes and reflects live changes. Which means diff will update if you make changes to your version when showing base/yours. The merge tool has also gotten some love.</p>
<p><strong>Local workspaces<br /></strong>Removes offline mode, and the time out method require to go offline. Doesn&#8217;t handle modified files by reading the read-only bit on the file (Took them until 2012 to fix it). File system watcher watch for change made outside of VS, and lists them nicely in the pending changes pane.</p>
<p><strong>Shelving<br /></strong>Shelveset merge (with current and baseless) and searching of shelvesets.</p>
<p><strong>Code Review workflow<br /></strong>Request code-review workflow on suspended changeset or checked in changeset as well as code reviewing functionality with the ability to comment on specific changes and even alter the changeset.</p>
<p><strong>Rollback changesets</strong></p>
<p><strong>Async operations<br /></strong>Modality and blocking operations has now been removed, no more  waiting on visual studio to complete retrieving things (search items etc.).</p>
<p><strong>New Builds page<br /></strong>Shows builds associated to me (started by me etc.). Extensible</p>
<p>Summary:</p>
<p>I really like the new way that TFS 11 shows data; putting the concept of &#8220;My work&#8221; in focus, showing my work items and my builds etc. This combined with the new functionalities provided, working in TFS 11 will be much more smother and faster than it&#8217;s predecessors and I am really looking forward until it&#8217;s released and part of development environment.</p>
<p><em>For more info:<br /></em><em>Developer collaboration with Team Foundation Server 11<br /></em><em>Build 2011 Day 4 </em><em>TOOL-811T<br /></em><em>Speakers: Jamie Cool</em><em> <br /></em><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-811T" target="_blank"><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-811T" target="_blank">http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-811T</a></a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2012-01-13 15:55:00</wp:post_date>
  <wp:post_date_gmt>2012-01-13 19:55:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>review-tfs-11-the-things-i-look-forward-to</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15777321283/review-tfs-11-the-things-i-look-forward-to]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15777321283]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15777321283]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Enumerable.Zip</title>
  <link>http://johanilsson.wordpress.com/2012/01/13/enumerable-zip/</link>
  <pubDate>Fri, 13 Jan 2012 15:00:05 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/01/13/enumerable-zip/</guid>
  <description/>
  <content:encoded><![CDATA[<p>I just stumbled upon Enumerable.Zip which is a newly added Linq operator since .NET Framework 4.</p>
<p>Signature is as follows:</p>
<p>public static IEnumerable&lt;TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(this IEnumerable&lt;TFirst&gt; first, IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst, TSecond, TResult&gt; func);</p>
<p>Much like a zipper it &#8220;zips&#8221; together two IEnumerables applying a specified function over each pair of elements.</p>
<p>I&#8217;ve seen examples which print the greater number from two list of ints, which constructs addresses from four lists of city/street/number/flatnumber and one that prints name and age from name/age lists.</p>
<p>I have as of yet found a good real world example, and am incapable of thinking one up. Anyone out there who have made good use of this added functionality?</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>10</wp:post_id>
  <wp:post_date>2012-01-13 11:00:05</wp:post_date>
  <wp:post_date_gmt>2012-01-13 15:00:05</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>enumerable-zip</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15770545388/enumerable-zip]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15770545388]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15770545388]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Improving blog Part 1: Installing Wordpress</title>
  <link>http://johanilsson.wordpress.com/2012/01/12/improving-blog-part-1-installing-wordpress/</link>
  <pubDate>Thu, 12 Jan 2012 11:00:05 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/01/12/improving-blog-part-1-installing-wordpress/</guid>
  <description/>
  <content:encoded><![CDATA[<p>So I&#8217;m in the process of moving my blog from tumblr to my own hosting environment. I installed php, mysql and wordpress on my readynas and everything went smooth, until I tried to browse the blog. The php file was downloaded instead of parsed. After some digging around I found out that the php module wasn&#8217;t being loaded by apache and after a quick edit of the conf file.</p>
<blockquote>
<p>LoadModule php5_module /path/to/apache/modules/libphp5.so</p>
</blockquote>
<p><span>A new error was presented to me:</span></p>
<blockquote>
<p><span>Your server is running PHP version 5.2.0-8+etch16 but WordPress 3.3.1 requires at least 5.2.4.</span></p>
</blockquote>
<p><span>This is due to the readynas being locked to debian etch version for stability. To resolve this I had to uninstall the </span>libapache2-mod-php5 and php5-mysql that I had apt-get&#8217;d (using apt-get remove &#8212;purge package) and install a community released php addon containing a higher version. After installing the addon I was presented with yet another error:</p>
<blockquote>
<p>Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</p>
</blockquote>
<p>This is caused by a quirk in the addon, install it again did the trick.</p>
<p>So now I have a running instance of wordpress on my readynas, and am off to do some configuration.</p>
<p>The next part will contain information about importing old tumblr articles into wordpress. Check back!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2012-01-12 11:00:05</wp:post_date>
  <wp:post_date_gmt>2012-01-12 11:00:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>improving-blog-part-1-installing-wordpress</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15718476615/improving-blog-part-1-installing-wordpress]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15718476615]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15718476615]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My take on Ref</title>
  <link>http://johanilsson.wordpress.com/2012/01/11/my-take-on-ref/</link>
  <pubDate>Wed, 11 Jan 2012 15:00:05 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2012/01/11/my-take-on-ref/</guid>
  <description/>
  <content:encoded><![CDATA[<p>A good friend of mine asked me to share my thoughts on the ref keyword so here goes.</p>
<p>To give it some context: To me a good method is a function taking a variable amount of parameters, making some processing and returning the result. Furthermore the method should do one thing and one thing only and never change input parameter values.</p>
<p>Now the ref keyword allow developers to stray from this &#8220;ideal&#8221; method by allowing it to change the values of the input parameters. Obfuscating the self-documentation of the method and by this diffusing what the method does and what it&#8217;s responsibility is. This creates a required understanding by your fellow colleagues about the intricates of the method, and in turn requires every developer to know how every method in the system is implemented.</p>
<p>The most common reason for using ref parameters is simply that your method is doing to much, rendering you unable to return a single value/collection to account for everything that is being done, ending up with sending and object as input parameter and changing a lot of values. This may be improved by returning part of the data as an out parameter and part of it as the return value if possible.</p>
<p>The reason why I think that using out is better than ref is because out doesn&#8217;t obfuscate the api and the intention of the method. Using Ref conveys that &#8220;This method might(?) change values of the parameter or even the parameter itself&#8221; while Out conveys that &#8220;This method will change the parameter&#8221;.</p>
<p>Consider this test example:<br />Assert.AreEqual(4, Square(2));</p>
<p>To:<br />float a = 2;<br />Square(a);<br />Assert.AreEqual(4, a);</p>

<ol></ol><p>To sum up with one of my favourite quotes regarding ref and out</p>
<blockquote>
<p>You rarely need to use Out, and you need a really good reason for using Ref</p>
</blockquote>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2012-01-11 11:00:05</wp:post_date>
  <wp:post_date_gmt>2012-01-11 15:00:05</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>my-take-on-ref</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="rant"><![CDATA[Rant]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15666563429/my-take-on-ref]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15666563429]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15666563429]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Design Pattern Stages of Learning</title>
  <link>http://johanilsson.wordpress.com/2011/12/09/learning-steps-for-design-patterns-from-dnrtv-194/</link>
  <pubDate>Fri, 09 Dec 2011 22:29:10 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/12/09/learning-steps-for-design-patterns-from-dnrtv-194/</guid>
  <description/>
  <content:encoded><![CDATA[<img class="alignnone size-full wp-image-14" alt="" src="http://johanilsson.files.wordpress.com/2011/12/tumblr_lvy8omjslr1qm4rleo1_1280.jpg" width="1024" height="640" />

Learning steps for design patterns, from dnrtv 194]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>2011-12-09 18:29:10</wp:post_date>
  <wp:post_date_gmt>2011-12-09 22:29:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>learning-steps-for-design-patterns-from-dnrtv-194</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_format" nicename="post-format-image"><![CDATA[Image]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/13975033915/learning-steps-for-design-patterns-from-dnrtv-194]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[13975033915]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_attribution</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[13975033915]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://johanilsson.wordpress.com/2011/12/09/learning-steps-for-design-patterns-from-dnrtv-194/attachment/14/</link>
  <pubDate>Fri, 09 Dec 2011 18:29:10 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.files.wordpress.com/2011/12/tumblr_lvy8omjslr1qm4rleo1_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2011-12-09 18:29:10</wp:post_date>
  <wp:post_date_gmt>2011-12-09 18:29:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>14</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>13</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://johanilsson.files.wordpress.com/2011/12/tumblr_lvy8omjslr1qm4rleo1_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>Books for sale</title>
  <link>http://johanilsson.wordpress.com/2011/12/05/some-books-up-for-sale-for-a-small-price-get-in/</link>
  <pubDate>Mon, 05 Dec 2011 16:43:01 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/12/05/some-books-up-for-sale-for-a-small-price-get-in/</guid>
  <description/>
  <content:encoded><![CDATA[<img class="alignnone size-full wp-image-17" alt="" src="http://johanilsson.files.wordpress.com/2011/12/tumblr_lvqdzq9s1c1qm4rleo1_1280.jpg" width="1024" height="768" />

Some books up for sale for a small price. Get in touch if any can be of use!

The books are the following:

Against the god - Peter Bernstein

Applying domain driven design - Jimmy Nilsson

Arbeta i project en introduktion - Sven Eklund

Asp.net 3.5 step by step - George Shepherd

Computer networking a top down approach - James Kurose

Don’t make me thin a common sense approach to web usability - Steve Krug

Essential software test design - Torbjörn Ryber

Framework design guidelines - Krzysztof Cwalina

Information security a strategic approach - Vincent LeVeque

Pro asp.net mvc - Steven Sanderson

Professional application lifecycle management with visual studio 2010 - Mickey Gousset

Security engineering a guide to building dependable distributed systems - Ross Anderson

Software exorcism a handbook for debugging and optimizing legacy code - Bill Blunden

Software verification and validation for practitioners and managers - Steven Rakitin

The art of intrusion - Kevin Mitnick]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2011-12-05 12:43:01</wp:post_date>
  <wp:post_date_gmt>2011-12-05 16:43:01</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>some-books-up-for-sale-for-a-small-price-get-in</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_format" nicename="post-format-image"><![CDATA[Image]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/13777054050/some-books-up-for-sale-for-a-small-price-get-in]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[13777054050]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_attribution</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[13777054050]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://johanilsson.wordpress.com/2011/12/05/some-books-up-for-sale-for-a-small-price-get-in/attachment/17/</link>
  <pubDate>Mon, 05 Dec 2011 12:43:01 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.files.wordpress.com/2011/12/tumblr_lvqdzq9s1c1qm4rleo1_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2011-12-05 12:43:01</wp:post_date>
  <wp:post_date_gmt>2011-12-05 12:43:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>17</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>16</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://johanilsson.files.wordpress.com/2011/12/tumblr_lvqdzq9s1c1qm4rleo1_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>Lying code!?!</title>
  <link>http://johanilsson.wordpress.com/2011/11/24/lying-code/</link>
  <pubDate>Thu, 24 Nov 2011 15:06:05 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/11/24/lying-code/</guid>
  <description/>
  <content:encoded><![CDATA[<p>I hate lying code and here&#8217;s why.</p>
<p>Well of course because I&#8217;m an honest man but also because it introduces complexity and required knowledge about the system and it&#8217;s deviations from logical expected behaviour.</p>
<p>Let me present an example I stumbled upon today:<br />I consumed a method today with the following signature</p>
<p>public int? MyMethod();</p>
<p>And was having trouble getting it to work, and when diving into it I was presented with this brilliant code piece at the end of the function:</p>
<p>return 1; // return 1 as default</p>
<p>Keep it simple and logical, return null! The blame game was on!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2011-11-24 11:06:05</wp:post_date>
  <wp:post_date_gmt>2011-11-24 15:06:05</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>lying-code</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="rant"><![CDATA[Rant]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/13249203875/lying-code]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[13249203875]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[13249203875]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>"Only refactor when two or more objects use the same functionality"!?!</title>
  <link>http://johanilsson.wordpress.com/2011/11/23/only-refactor-when-two-or-more-objects-use-the-same/</link>
  <pubDate>Wed, 23 Nov 2011 15:07:05 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/11/23/only-refactor-when-two-or-more-objects-use-the-same/</guid>
  <description/>
  <content:encoded><![CDATA[<p>I disapprove of this for mentality because of three things:</p>
<p><strong>Smaller code:</strong></p>
<p>If you refactor things into helper classes or methods your main function will be smaller and easier to grasp.</p>
<p><strong>Realize re-use:</strong></p>
<p>I think there&#8217;s a chance of never refactoring because you never see the need for it; when you or someone on your team implement the same functionality the second or third time they may not know of or have forgotten the other implementations of the existing functionality. If you refactor logical pieces of code it&#8217;s easier to realize re-use.</p>
<p><strong>Easier to test:</strong></p>
<p>It&#8217;s easier to test a refactored small set of code in itself than figuring out how to write unit tests for a method consisting of 200 or so lines of code. Usually if you try to write unit tests for this large a method, they end up being integrations tests or happy path tests.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2011-11-23 11:07:05</wp:post_date>
  <wp:post_date_gmt>2011-11-23 15:07:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>only-refactor-when-two-or-more-objects-use-the-same</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="rant"><![CDATA[Rant]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/13200621067/only-refactor-when-two-or-more-objects-use-the-same]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[13200621067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[13200621067]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Daily refactoring</title>
  <link>http://johanilsson.wordpress.com/2011/11/22/daily-refactoring/</link>
  <pubDate>Tue, 22 Nov 2011 15:05:05 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/11/22/daily-refactoring/</guid>
  <description/>
  <content:encoded><![CDATA[<p><pre><span>#region</span> MyRegion
<span>	</span>if (!<span>MyHelper</span>.MyBool)
<span>	</span>{
<span>		</span>myclass.Method(int, <span>false</span>, string, enum);
<span>		</span>MyHelper.MyBool = <span>true</span>;
	}
	<span>else</span>
	{
	<span>	</span>myclass.Method(int, <span>true</span>, string, enum);
	}</pre>
<pre><span>#endregion</span></pre>
<pre><span>Becomes</span></pre>
<pre><pre>myClass.Method(int, <span>MyHelper</span>.MyBool, string, enum);
<span>MyHelper</span>.MyBool = <span>true</span>;</pre>
<pre><br /></pre>
<pre>Tidier and faster : )</pre>
</pre></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2011-11-22 11:05:05</wp:post_date>
  <wp:post_date_gmt>2011-11-22 15:05:05</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>daily-refactoring</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/13154339472/daily-refactoring]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[13154339472]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[13154339472]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Technical debt 101</title>
  <link>http://johanilsson.wordpress.com/2011/11/10/technical-debt-101/</link>
  <pubDate>Thu, 10 Nov 2011 17:28:03 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/11/10/technical-debt-101/</guid>
  <description/>
  <content:encoded><![CDATA[<p>I would like to start this article with the definition of what technical debt is. Technical debt is taking shortcuts for good or bad, for known or unknown reasons. The technical debt grows exponentially over time because of interest. </p>
<p><strong>Interest:</strong></p>
<blockquote>
<p>Every minute spent on not-quite-right code counts as interest on that debt - Wikipedia</p>
</blockquote>
<p>The amount of interest is based on a number of things, among others:</p>
<ul><li>Lack of knowledge - Either from time passing and people forget stuff, or from people changing jobs, leave of absence, death etc.</li>
<li>Increase in complexity - New functionality will be designed and implemented on top and according to existing technical debt, writing more code to get around code, with more code you need more tests and this code and tests needs review. Hence technical debt will increase technical debt. </li>
</ul><p><strong>How to spot debt:</strong></p>
<p><span>There are some signs to look for when you go &#8220;debt spotting&#8221; to make it easier to point technical debt.</span></p>
<ul><li>The code areas where you as a developer when assigned bugs or to extend this code feel your heart sink, your moral drop e.g spaghetti code, or unnecessary complexity, or if the intent of the code isn&#8217;t clear enough so it has to use comments or regions as a crutch for relaying what it does</li>
<li>The average amounts of tasks per sprint decreases</li>
<li>The number of tests increases at the same time as &#8220;average amount of tasks/sprint decreases&#8221;</li>
</ul><p>With an agile project methodology you don&#8217;t necessarily have a lower technical debt but because of its support for rapid changes the debt will be highlighted at an earlier stage allowing you to decide if to pay this debt or not.</p>
<p>In my experience test driven development and tests in general protect you from some technical debt because you&#8217;ve had to go through the steps of &#8220;red&#8221;, &#8220;green&#8221;, &#8220;refactor&#8221; and thereby paid a little of the debt up front.</p>
<p><strong>Paying debt:</strong></p>
<p>Like with any debt there is always an enforcer, a collector that will _make_ you pay that debt. With technical debt, this collector is usually time, or new requirements.  </p>
<p>Because of the interest, paying the debt will be more and more expensive as time goes, until you are forced by time to pay, at its most latest stage. This is when its the most expensive to pay the debt because you are most prone to the interests of people with skills have moved on, system have changed, a lot of technical debt has been built and made dependent on underlying technical debt. The debt may even be so large so for you to be able to pay it your feature development will stagnate and may even lead to loss of market pieces.</p>
<p>Often project managers don&#8217;t allow developers to pay technical debt, or don&#8217;t prioritise it since its sometimes hard to motivate a sprint that starts with 12 tasks and ends with 12 tasks still to do, with the only thing the developers salary has paid is the debt.</p>
<p><strong>Types of Technical Debt:</strong></p>
<ul><li>Bugs are not technical debt until someone decides to not fix them.</li>
<li>Manage technical debt = planned technical debt</li>
<li>Unmanaged is the worst, this is only fixed when the pain is felt</li>
</ul><p><strong>Monitoring Technical Debt:</strong></p>
<p>In order to be able to monitor the debt, you must keep track of it. This involves keeping track of both the managed debt introduced on purpose using shortcuts, quick solutions and the &#8220;not-quit-right&#8221; solutions, and the unmanaged ones whenever they are encountered and grade them in some way that gives them a relational size difference.</p>

<p>Think your code is good?</p>
<blockquote>
<p>Technical debt is like an iceberg with only 10 percent visible.</p>
</blockquote>
<p>Until next time, keep track of that 10 percent for all your life&#8217;s worth&#160;: )</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>2011-11-10 13:28:03</wp:post_date>
  <wp:post_date_gmt>2011-11-10 17:28:03</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>technical-debt-101</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/12597714167/technical-debt-101]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[12597714167]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[12597714167]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Code that bring me a smile</title>
  <link>http://johanilsson.wordpress.com/2011/11/09/code-that-bring-me-a-smile/</link>
  <pubDate>Wed, 09 Nov 2011 16:28:23 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/11/09/code-that-bring-me-a-smile/</guid>
  <description/>
  <content:encoded><![CDATA[<p>MyDto.MyChildDto.MyProp = MyDto.MyChildDto.MyProp;</p>
<p>Poor mans NOP/NOOP? :D</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2011-11-09 12:28:23</wp:post_date>
  <wp:post_date_gmt>2011-11-09 16:28:23</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>code-that-bring-me-a-smile</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="rant"><![CDATA[Rant]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/12554048329/code-that-bring-me-a-smile]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[12554048329]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[12554048329]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Code Comments!?!</title>
  <link>http://johanilsson.wordpress.com/2011/11/05/code-comments/</link>
  <pubDate>Sat, 05 Nov 2011 15:04:05 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/11/05/code-comments/</guid>
  <description/>
  <content:encoded><![CDATA[<p>I hate comments with a passion!</p>
<p><em>This post is not about Framework or API documentation, this kind of documentation serves another purpose and is of vital essence for the product. I&#8217;m talking about the documentation in a business application of which most of us are working on.</em></p>
<p>The reason for why I hate comments that more often than not are they either lies, lying about the code, or bad. Bad and lying comments are both time consuming and a distraction for the task at hand.</p>
<p><strong>Examples of bad use of comments:</strong></p>
<ul><li>Explains complex functionality instead of taking time to refactor</li>
<li>Explains deviations from normal/expected behaviour behaviour</li>
<li>Unnecessary comments (summary - &#8220;Gets or sets the property&#8221;, param - &#8220;The param x&#8221;, returns - &#8220;The value to be returned&#8221;)</li>
<li>Fix this later, make this better, etc</li>
</ul><p>I view comments as crutches, &#8220;I&#8217;m not a good enough developer or care enough to make this code simple and understandable&#8221; and adds a comment for it instead of taking the small amount of time to fix it.</p>
<p>Real-world example:<br />I&#8217;ve worked on an enterprise system where everything was enforced to be documented for future employees. We were to document from the start of the project and weren&#8217;t allowed to add documentation in a later more closer to release point in time. Funny thing is, we probably spent several hundred hours on writing these comments for files, classes, properties and methods of which at least 60% where bad or lies and the project was cancelled before we made it to the first alpha release.</p>
<p><strong>Conclusion</strong>:<br />Bad documentation is worse than no documentation! Document only what needs documentation and take some pride in your work. Instead of adding comments, take the time to make the refactorings, give methods and properties descriptive names and let the code tell the story, not the comments.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2011-11-05 11:04:05</wp:post_date>
  <wp:post_date_gmt>2011-11-05 15:04:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-comments</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="rant"><![CDATA[Rant]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/12364623381/code-comments]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[12364623381]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[12364623381]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Regions!?!</title>
  <link>http://johanilsson.wordpress.com/2011/11/04/regions/</link>
  <pubDate>Fri, 04 Nov 2011 18:52:32 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/11/04/regions/</guid>
  <description/>
  <content:encoded><![CDATA[<p>I do hate regions and here&#8217;s why!</p>
<p>A region isn&#8217;t an anti-pattern or even a code smell in itself but it is often used as a means to hide them. Regions are for folding code and to &#8220;hide&#8221; it, and I&#8217;m wondering, what are you hiding, wouldn&#8217;t it be better to take some pride in your work, invest some time and refactor your code so you don&#8217;t have to hide it? </p>
<p>A region is more often than not an indication of that something needs to be renamed, refactored and sometimes even rewritten into new functions, value-objects or even classes.</p>
<p>I still haven&#8217;t been presented with a valid use of regions, and the ones that keep coming up are, I use regions for:</p>
<ul><li>Separating different functionality in a method / <em>Hello? Have you forgot that methods should be short, do one thing only. If your method does more than one thing, don&#8217;t separate it into regions, refactor it into more methods! Giving you a &#8220;Table of Content&#8221; of the functionality being called.</em></li>
<li>Grouping different kind of class members together / <em>Hello? Heard about stylecop, this is what it&#8217;s for.</em></li>
<li>Hiding generated code / <em>Hello? Heard about partial classes?</em></li>
<li>Dividing contents in my large class / <em>Hello? Give me your email and I&#8217;ll send you a book about this latest thing called OO programming and Inheritance</em></li>
</ul><p>Conclusion: <strong>Regions are bad practice both inside and outside of methods! </strong>Stay away from those regions, refactor your code, implement stylecop for sorting class members and learn how to navigate using visual studio or resharper.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2011-11-04 14:52:32</wp:post_date>
  <wp:post_date_gmt>2011-11-04 18:52:32</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>regions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="rant"><![CDATA[Rant]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/12326776410/regions]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[12326776410]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[12326776410]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Todays Refactoring: Dictionary usage</title>
  <link>http://johanilsson.wordpress.com/2011/11/01/todays-refactoring-dictionary-usage/</link>
  <pubDate>Tue, 01 Nov 2011 22:51:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/11/01/todays-refactoring-dictionary-usage/</guid>
  <description/>
  <content:encoded><![CDATA[<p>Code like the following:</p>
<pre>if (dictionary.ContainsKey(key))
{
  dictionary[key] = value;<br />}
else
{
  dictionary.Add(key, value);<br />}
</pre>
<p>Can be substituted with the following:</p>
<pre>dictionary[key] = value;</pre>
<p>The code will be cleaner, functionality will be the same and a few operations faster :P</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2011-11-01 18:51:00</wp:post_date>
  <wp:post_date_gmt>2011-11-01 22:51:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>todays-refactoring-dictionary-usage</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/12203808043/todays-refactoring-dictionary-usage]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[12203808043]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[12203808043]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Implicit Operators</title>
  <link>http://johanilsson.wordpress.com/2011/10/26/implicit-operators/</link>
  <pubDate>Wed, 26 Oct 2011 23:28:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/10/26/implicit-operators/</guid>
  <description/>
  <content:encoded><![CDATA[<p>Mapping occur in many places in applications, mostly in boundaries between layers. Mapping one type to another, be it server to client DTOs or something else, there are numerous ways of accomplishing it. Some use a static Mapper factory, some use tools like AutoMapper, my preferred way of doing it is with the use of Implicit Operators.</p>
<p>Like so:<span></span></p>
<pre><span>static</span> <span>void</span> Main(<span>string</span>[] args)
{
	<span>var</span> domainModel = <span>new</span> <span>DomainModel</span>
	{
		Firstname = <span>"Firstname"</span>,
		Lastname = <span>"Lastname"</span>
	};
 
	<span>ViewModel</span> viewModel = domainModel;
 
	<span>Console</span>.WriteLine(viewModel.Name);
}
 
<span>private</span> <span>class</span> <span>ViewModel</span>
{
    <span>public</span> <span>string</span> Name { <span>get</span>; <span>set</span>; }
 
	<span>public</span> <span>static</span> <span>implicit</span> <span>operator</span> <span>ViewModel</span>(<span>DomainModel</span> model)
	{
		<span>return</span> <span>new</span> <span>ViewModel</span>
		{
			Name = model.Firstname + <span>" "</span> + model.Lastname
		};
	}
}
 
<span>private</span> <span>class</span> <span>DomainModel</span>
{
    <span>public</span> <span>string</span> Firstname { <span>get</span>; <span>set</span>; }
    <span>public</span> <span>string</span> Lastname { <span>get</span>; <span>set</span>; }
 
            
}</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2011-10-26 19:28:00</wp:post_date>
  <wp:post_date_gmt>2011-10-26 23:28:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>implicit-operators</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/11957741980/implicit-operators]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[11957741980]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[11957741980]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Brainfart when sorting Lists</title>
  <link>http://johanilsson.wordpress.com/2011/10/24/brainfart-when-sorting-lists/</link>
  <pubDate>Mon, 24 Oct 2011 19:48:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/2011/10/24/brainfart-when-sorting-lists/</guid>
  <description/>
  <content:encoded><![CDATA[Just encountered this piece of code today:
Array.Sort(myList.ToArray());

foreach(var i in myList)
{ // Do something with i }

My first though was “Wait what?” Is there some hidden functionality of List.ToArray() that I have missed which only is passed onto jedi masters? Does this way of sorting perform better than just List.Sort?

I had to investigate, so I wrote up this little code:
<pre>var list = new List&lt;int&gt; {9, 4, 7, 1, 2};

Array.Sort(list.ToArray());
foreach (var i in list)
{
   Console.WriteLine(i);
}

Console.ReadKey();

</pre>
Lo and behold the printed sequence is: 9 4 7 1 2, hence we are creating an array, sorting it then throwing it away, only to use our list in the foreach.

List.Sort uses Array.Sort internally so I would dare go out on a limb and say that speed for sorting should be the same]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2011-10-24 19:48:00</wp:post_date>
  <wp:post_date_gmt>2011-10-24 19:48:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>brainfart-when-sorting-lists</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/11873569268/brainfart-when-sorting-lists]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[11873569268]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[11873569268]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Topshelf vs SimpleServices</title>
  <link>http://johanilsson.wordpress.com/?p=29</link>
  <pubDate>Mon, 30 Sep 2013 17:28:40 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=29</guid>
  <description/>
  <content:encoded><![CDATA[<p>Having gotten tired of having to create three different projects for my windows services, *.Console, *.Service and .*Core, I started looking around for alternative ways of implementing windows services. My requirements are simple:</p>
<p>Debuggable, <span>Testable, </span><span>Installable</span></p>
<p><span>Having found two open source candidates: <a href="https://github.com/Topshelf/Topshelf" title="Topshelf" target="_blank">Topshelf </a>and <a href="https://github.com/davidwhitney/SimpleServices" title="SimpleServices" target="_blank">SimpleServices </a>but not any comparison between the two, I decided to write one up.</span></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2013-09-30 13:28:40</wp:post_date>
  <wp:post_date_gmt>2013-09-30 17:28:40</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>topshelf-vs-simpleservices</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/62714912564/topshelf-vs-simpleservices]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[62714912564]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[62714912564]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Bug with Nancy.RouteHelpers and parameter containing chars and int</title>
  <link>http://johanilsson.wordpress.com/?p=30</link>
  <pubDate>Mon, 16 Sep 2013 15:47:28 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=30</guid>
  <description/>
  <content:encoded><![CDATA[<p>Path &#8220;/wagermask/CustomerPerSportWagerType/customer1&#8221; string</p>
<pre>Get[<span>Route</span>.Root().AnyStringAtLeastOnce(<span>"customerId"</span>)] = p =&gt;
</pre>
<pre>Get[<span>Route</span>.Root().AnyIntAtLeastOnce(<span>"maskId"</span>)] = p =&gt;
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2013-09-16 15:47:28</wp:post_date>
  <wp:post_date_gmt>2013-09-16 15:47:28</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bug-with-nancy-routehelpers-and-parameter-containing</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/61411763428/bug-with-nancy-routehelpers-and-parameter-containing]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[61411763428]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[61411763428]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Domain Driven Development, Domain Events &amp; Unit Testing - TechEdAU2011ARC307 Notes</title>
  <link>http://johanilsson.wordpress.com/?p=31</link>
  <pubDate>Wed, 11 Sep 2013 11:38:40 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=31</guid>
  <description/>
  <content:encoded><![CDATA[<p>Ubiquitous language: geeks and suites can talk. Created by terms and definitions</p>
<p><span>Bounded contexts: Domain is big, partitions are needed. Contexts are scopes and terms/features can be in scope or out of scope. Helps to partition what to build in isolation without having to model the whole domain up front.</span></p>
<p>Entity: Has Identity and lifecycle</p>
<p>Value object: Sum of all its values: DateOfBirth is day month year, but no identity A for a particular birth. It&#8217;s always attached to an entity.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>2013-09-11 11:38:40</wp:post_date>
  <wp:post_date_gmt>2013-09-11 11:38:40</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>domain-driven-development-domain-events-unit-testing</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/60925919449/domain-driven-development-domain-events-unit-testing]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[60925919449]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[60925919449]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ConfigurationSection "A testable, dependable configuration solution"</title>
  <link>http://johanilsson.wordpress.com/?p=32</link>
  <pubDate>Thu, 08 Aug 2013 12:48:41 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=32</guid>
  <description/>
  <content:encoded><![CDATA[<p>Custom Configuration section</p>
<p>Simple props / <span>array of parameters (parsed on retrieval)</span></p>
<p>Testing</p>
<p><span>Nested values / lists</span></p>
<p>&lt;prop &#8220;value1 value2 value3&#8221; /&gt;</p>
<p>&lt;list&gt;&lt;add value1/&gt;&lt;add value2/&gt;&lt;/list&gt;</p>
<p>&lt;list&gt;&lt;listItem&gt;&lt;Value1&gt;&lt;value2&gt;&lt;/listItem&gt;&lt;/list&gt;</p>
<pre>AddItemName<br /><br />Linq<br /><br />TryGet by key indexer</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2013-08-08 12:48:41</wp:post_date>
  <wp:post_date_gmt>2013-08-08 12:48:41</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>configurationsection-a-testable-dependable</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/57699134713/configurationsection-a-testable-dependable]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[57699134713]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[57699134713]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Ventures into Rx Land</title>
  <link>http://johanilsson.wordpress.com/?p=33</link>
  <pubDate>Sat, 13 Jul 2013 00:19:34 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=33</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2013-07-13 00:19:34</wp:post_date>
  <wp:post_date_gmt>2013-07-13 00:19:34</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ventures-into-rx-land</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/55298770292/ventures-into-rx-land]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[55298770292]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[55298770292]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Dezerialize to dynamic dictionar</title>
  <link>http://johanilsson.wordpress.com/?p=34</link>
  <pubDate>Tue, 09 Jul 2013 13:35:07 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=34</guid>
  <description/>
  <content:encoded><![CDATA[<p><span>dynamic body = DynamicDictionary.Create(JsonConvert.DeserializeObject&lt;DynamicDictionary&gt;(new StreamReader(Request.Body).ReadToEnd()));</span></p>
<p><span> </span></p>
<pre class="multiline">var payload = result.Body.DeserializeJson&lt;Dictionary&lt;string, object&gt;&gt;();</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2013-07-09 13:35:07</wp:post_date>
  <wp:post_date_gmt>2013-07-09 13:35:07</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dezerialize-to-dynamic-dictionar</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/54998456206/dezerialize-to-dynamic-dictionar]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[54998456206]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[54998456206]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Single responsibility dtos</title>
  <link>http://johanilsson.wordpress.com/?p=35</link>
  <pubDate>Wed, 15 May 2013 13:17:47 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=35</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2013-05-15 13:17:47</wp:post_date>
  <wp:post_date_gmt>2013-05-15 13:17:47</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>single-responsibility-dtos</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/50494136236/single-responsibility-dtos]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[50494136236]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[50494136236]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TestData</title>
  <link>http://johanilsson.wordpress.com/?p=36</link>
  <pubDate>Thu, 02 May 2013 15:21:19 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=36</guid>
  <description/>
  <content:encoded><![CDATA[<p>SameOrFake<br />
as extension</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>2013-05-02 15:21:19</wp:post_date>
  <wp:post_date_gmt>2013-05-02 15:21:19</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testdata</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/49440235304/testdata]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[49440235304]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[49440235304]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Withlock</title>
  <link>http://johanilsson.wordpress.com/?p=37</link>
  <pubDate>Thu, 02 May 2013 15:15:54 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=37</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2013-05-02 15:15:54</wp:post_date>
  <wp:post_date_gmt>2013-05-02 15:15:54</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>withlock</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/49439988817/withlock]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[49439988817]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[49439988817]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Singleton vs Static</title>
  <link>http://johanilsson.wordpress.com/?p=38</link>
  <pubDate>Fri, 16 Mar 2012 20:10:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=38</guid>
  <description/>
  <content:encoded><![CDATA[<p>heap vs stack</p>
<p>Others can inherit, derive from base class or implement interface</p>
<p>Passing around threating as normal object vs accessing when needed</p>
<p>Neither is thread-safe by default, you need to make them.</p>
<p><span> People saying that singleton isn&#8217;t threadsafe mean that a singleton is shared between threads</span><em>unnecessarily</em><span> all the time, while stack objects get shared when you need them to, which means you don&#8217;t have to do unneeded synchronization</span></p>
<p><span><br /></span></p>
<p><span>Static class only static members</span></p>
<p><span><br /></span></p>
<p><span>Singletons should be prohibited because they make the code hard to test. It is harder to re-cycle and re-initialize a singleton object for each tests, than it is to create an object for each test.</span></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>38</wp:post_id>
  <wp:post_date>2012-03-16 20:10:00</wp:post_date>
  <wp:post_date_gmt>2012-03-16 20:10:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>singleton-vs-static</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/19409622781/singleton-vs-static]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[19409622781]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[19409622781]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Parallel != Async explained</title>
  <link>http://johanilsson.wordpress.com/?p=39</link>
  <pubDate>Tue, 06 Mar 2012 15:26:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=39</guid>
  <description/>
  <content:encoded><![CDATA[<p>We were just talking nerd stuff on work when we touched upon parallel and async and one of my fellow colleagues said &#8220;they&#8217;re basically the same&#8221; and I thought this needs straightening out&#160;: )</p>
<p>Although parallel and async give you the same result of increase in processing/throughput, the inner workings and when they are utilized are the opposites with the first one being leveraged when you have too much to do and the latter when you have too little.</p>
<p>Parallel works by splitting workload and partitioning it onto different CPUs and is mainly of use for CPU computational heavy work. So for you web app, it&#8217;s better to let IIS handle the parallelism with serving requests on different threads.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2012-03-06 15:26:00</wp:post_date>
  <wp:post_date_gmt>2012-03-06 15:26:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>parallel-async-explained</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/18848349889/parallel-async-explained]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[18848349889]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[18848349889]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Asp.Net Mvc4</title>
  <link>http://johanilsson.wordpress.com/?p=40</link>
  <pubDate>Wed, 22 Feb 2012 17:11:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=40</guid>
  <description/>
  <content:encoded><![CDATA[<p>With mvc4 beta out bla bla bla</p>
<p>Displaymodes</p>
<p>no area for mobile, or different folder. Just add view.mobile.cshtml and everything works.</p>
<p>Mobile detection bundles using 51degrees, no need to manually regexp to find out if mobile.</p>
<p>Full ms stack</p>
<p>use mvc in webforms, webpages and other way around etc. Easy to convert legacy code</p>
<p>Async Task Controllers</p>

<p>js and css bundle and minification</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2012-02-22 17:11:00</wp:post_date>
  <wp:post_date_gmt>2012-02-22 17:11:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>asp-net-mvc4</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/18075902854/asp-net-mvc4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[18075902854]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[18075902854]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>YAGNI</title>
  <link>http://johanilsson.wordpress.com/?p=41</link>
  <pubDate>Sat, 18 Feb 2012 17:43:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=41</guid>
  <description/>
  <content:encoded><![CDATA[<p><span>People use it without having read the definition, because it&#8217;s one of those terms you think understand right away &#8220;You ain&#8217;t going to need it&#8221; surely must mean I can say this when I don&#8217;t need to have something?</span></p>
<p><span><br /></span></p>
<p>The reason for this post is because more and more people are starting to use YAGNI thinking it&#8217;s the only reason required against something. If they cannot find any other argument than YAGNI, then it&#8217;s probably not YAGNI. Its is a good argument, but not in itself. It is not a veto expression, more arguments needs to be provided.</p>
<p>Too many developers are fast to throw abbreviations as arguments thinking they are valid just because it accidentally fits right this instance.</p>
<p>YAGNI right at this moment, but if we need it in a near future and the cost of change later would be massive.</p>
<p>He said YAGNI (an abbreviation), which puts me off by implying i&#8217;m doing more than I need and over complicating thing and thereby not have the great enough knowledge of the requirements of the system.</p>
<p>YAGNI shouldn&#8217;t override good practices but if often does. Splitting project, yagni, creating layers, yagni.</p>
<p>What about seperation, maintainability etc. Just because it&#8217;s not needed right now doesn&#8217;t mean it&#8217;s yagni. postponing refactors and best practices and until you need them will cost you.</p>
<p>YAGNI shouldn&#8217;t be used for arguing that You Don&#8217;t Need It Right Now.</p>

<p><strong>Per definition it is:</strong></p>
<p><em><strong>&#8220;</strong>programmers should not add functionality until it is necessary &#8221;</em> or<br /><em>"Always implement things when you actually need them, never when you just foresee that you need them."</em></p>
<p><span>Which doesn&#8217;t</span></p>
<p>Don&#8217;t forget that per definition the term applies to features, not implementation details, architecture or anything else.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>41</wp:post_id>
  <wp:post_date>2012-02-18 17:43:00</wp:post_date>
  <wp:post_date_gmt>2012-02-18 17:43:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>yagni</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/17830282947/yagni]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[17830282947]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[17830282947]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Backbone experiment</title>
  <link>http://johanilsson.wordpress.com/?p=42</link>
  <pubDate>Thu, 09 Feb 2012 15:36:39 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=42</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2012-02-09 15:36:39</wp:post_date>
  <wp:post_date_gmt>2012-02-09 15:36:39</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>backbone-experiment</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/17319977532/backbone-experiment]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[17319977532]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[17319977532]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Review VS 11: The things I look forward to</title>
  <link>http://johanilsson.wordpress.com/2012/01/16/review-vs-11-the-things-i-look-forward-to/</link>
  <pubDate>Mon, 16 Jan 2012 17:01:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=43</guid>
  <description/>
  <content:encoded><![CDATA[<p>I recently published a review about TFS 11, what changes it brings and which of them will help me mostly in my future work. After having done this I was eager to dive into what visual studio 11 would bring. Unfortunately there wasn&#8217;t</p>
<p>Integrate powercommands</p>
<ul><li>solution navigator</li>
<li>quick access box</li>
</ul><p>Internet explorers developer tools (F12) inside visual studio. inspect dom, style tracing</p>
<p>Page inspector - Lookup</p>
<p>"My work"</p>
<p>Code review</p>
<p>VS compatibility between 2010 and 11</p>
<p><strong>Summary</strong></p>
<p>A lot of work done around async, debugging etc, c++ (unit testing etc), azure. Web development mostly things you&#8217;d expect be there, brace matching, intellisense, fuzzy match, css etc.</p>
<p>Dissapointed that the only good things are the ones concerning tfs.</p>
<p>(Too bad I don&#8217;t use them)</p>
<p>Yet again the new version of visual studio is actually the old one with the current features from resharper added.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>2012-01-16 17:01:00</wp:post_date>
  <wp:post_date_gmt>2012-01-16 17:01:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>review-vs-11-the-things-i-look-forward-to</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15952048975/review-vs-11-the-things-i-look-forward-to]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15952048975]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15952048975]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
    <wp:meta_value><![CDATA[draft]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
    <wp:meta_value><![CDATA[1380590745]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Improving blog Part 5: Adding Caching</title>
  <link>http://johanilsson.wordpress.com/2012/01/06/improving-blog-part-5-adding-caching/</link>
  <pubDate>Fri, 06 Jan 2012 17:01:49 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=44</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://wordpress.org/extend/plugins/wp-super-cache/" target="_blank"><a href="http://wordpress.org/extend/plugins/wp-super-cache/" target="_blank">http://wordpress.org/extend/plugins/wp-super-cache/</a></a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>2012-01-06 17:01:49</wp:post_date>
  <wp:post_date_gmt>2012-01-06 17:01:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>improving-blog-part-5-adding-caching</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15403038793/improving-blog-part-5-adding-caching]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15403038793]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15403038793]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
    <wp:meta_value><![CDATA[draft]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
    <wp:meta_value><![CDATA[1380590834]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Improving blog Part 4: Adding SEO</title>
  <link>http://johanilsson.wordpress.com/2012/01/06/improving-blog-part-4-adding-seo/</link>
  <pubDate>Fri, 06 Jan 2012 16:55:01 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=45</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://wordpress.org/extend/plugins/all-in-one-seo-pack/" target="_blank"><a href="http://wordpress.org/extend/plugins/all-in-one-seo-pack/" target="_blank">http://wordpress.org/extend/plugins/all-in-one-seo-pack/</a></a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>2012-01-06 16:55:01</wp:post_date>
  <wp:post_date_gmt>2012-01-06 16:55:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>improving-blog-part-4-adding-seo</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15402813321/improving-blog-part-4-adding-seo]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15402813321]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15402813321]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
    <wp:meta_value><![CDATA[draft]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
    <wp:meta_value><![CDATA[1380590840]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Improving blog Part 3: Making it mobile compliant</title>
  <link>http://johanilsson.wordpress.com/2012/01/06/improving-blog-part-3-making-it-mobile-compliant/</link>
  <pubDate>Fri, 06 Jan 2012 16:54:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=46</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://wordpress.org/extend/plugins/wptouch/" target="_blank"><a href="http://wordpress.org/extend/plugins/wptouch/" target="_blank">http://wordpress.org/extend/plugins/wptouch/</a></a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2012-01-06 16:54:00</wp:post_date>
  <wp:post_date_gmt>2012-01-06 16:54:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>improving-blog-part-3-making-it-mobile-compliant</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15402795476/improving-blog-part-3-making-it-mobile-compliant]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15402795476]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15402795476]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
    <wp:meta_value><![CDATA[draft]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
    <wp:meta_value><![CDATA[1380590845]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Improving blog Part 2: Importing old articles</title>
  <link>http://johanilsson.wordpress.com/2012/01/06/improving-blog-part-2-importing-old-articles/</link>
  <pubDate>Fri, 06 Jan 2012 16:53:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=47</guid>
  <description/>
  <content:encoded><![CDATA[<p><a href="http://wordpress.org/extend/plugins/tumblr-importer/" target="_blank"><a href="http://wordpress.org/extend/plugins/tumblr-importer/" target="_blank">http://wordpress.org/extend/plugins/tumblr-importer/</a></a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>2012-01-06 16:53:00</wp:post_date>
  <wp:post_date_gmt>2012-01-06 16:53:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>improving-blog-part-2-importing-old-articles</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/15402757666/improving-blog-part-2-importing-old-articles]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[15402757666]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[15402757666]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
    <wp:meta_value><![CDATA[draft]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
    <wp:meta_value><![CDATA[1380590850]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>List of Anti-patterns</title>
  <link>http://johanilsson.wordpress.com/?p=48</link>
  <pubDate>Tue, 13 Dec 2011 16:28:00 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">http://johanilsson.wordpress.com/?p=48</guid>
  <description/>
  <content:encoded><![CDATA[<p>Here I will collect a list of anti-patterns with a description. This will be updated as I encounter new ones.</p>
<p><strong>Cargo Cult Programming</strong></p>
<p>Including code that serves no purpose.</p>
<p>Understand why you use this inclusion of code.</p>
<p><strong>Copy Folder Version Control</strong></p>
<p><strong>Copy Paste Programming</strong></p>
<p><strong>Death March</strong></p>
<p>If project will fail doesn&#8217;t help if you add more people.</p>
<p><strong>Design by Committees</strong></p>
<p>End up with compromised solution satisfying everyone.</p>
<p><strong>Duct Tape Programming</strong></p>
<p>Increases technical debt. When it breaks it breaks in hard ways.</p>
<p><strong>Feature Creep</strong></p>
<p>Letting the feature change manpower or deadline.</p>
<p><strong>Flag over objects</strong></p>
<p><strong>Iceberg Class</strong></p>
<p>Only tip of functionality visible. Methods which should be visible. Unnecessary hiding code.</p>
<p><strong>Not Invented Here</strong></p>
<p>See: Reinventing the Wheel</p>
<p><strong>Reinventing the Wheel</strong></p>
<p>Rolling own Loggin, Auth, etc.</p>
<p><strong><br /></strong></p>
<p><strong><br /></strong></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2011-12-13 16:28:00</wp:post_date>
  <wp:post_date_gmt>2011-12-13 16:28:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>list-of-anti-patterns</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[http://johanilsson.tumblr.com/post/14169602700/list-of-anti-patterns]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tumblr_johanilsson_id</wp:meta_key>
    <wp:meta_value><![CDATA[14169602700]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[14169602700]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>"Passing parameters" to angular directives</title>
  <link>http://johanilsson.wordpress.com/?p=93</link>
  <pubDate>Tue, 01 Oct 2013 14:12:17 +0000</pubDate>
  <dc:creator>johanilsson</dc:creator>
  <guid isPermaLink="false">https://johanilsson.wordpress.com/?p=93</guid>
  <description/>
  <content:encoded><![CDATA[To maximize the power and re-usability of directives, it's often desirable to "pass parameters" to them or rather bind variables so that the directive can access them. There are three ways (Binding strategies) to achieve this.

@ : Passes the attribute as a string
= : Data binds the property to a property in your directive´s scope.
&amp; : Passes in a function that can be called later

If binding from and to the same name in both template and directive, then the name can be omitted.
<pre>&lt;myDirective name='MyName' /&gt;
These are equal:
name: '@name',
name: '@

This is not
myDirectiveScopeName: '@name'</pre>
I've created a menu directive which we can refactor into utilizing all of these three binding techniques. Starting out, we have four components, a view, a controller, a directive and a template.
<pre>&lt;div ng-controller="AngularMenuCtrl"&gt;
    &lt;menu /&gt;
&lt;/div&gt;

module.controller('AngularMenuCtrl', function () {
});

<span style="line-height:1.5;">&lt;div class="menu"&gt;</span>
    &lt;span&gt;{{title}}&lt;/span&gt;
    &lt;ul&gt;
        &lt;li ng-repeat="item in items" 
            ng-class="{selected: $index==selectedIndex}" 
            ng-click="Click($index)"&gt;{{item.Text}}
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;

app.directive("menu", function () {
    return {
        restrict: 'E',
        replace: true,
        transclude: false,
        templateUrl: '/Views/Menu.html',
        link: function (scope) {
            scope.title= 'My Menu';

            scope.items= [
            { Text: 'Menu1', Value: 'Url1' },
            { Text: 'Menu2', Value: 'Url2' }
            ];

            scope.Click = function (index) {
                scope.selectedIndex = index;
                alert("Transitioning to " + scope.items[index].Value);
            };
         }
     };
});</pre>
You've correctly  noticed that there isn't much re-usability in this directive: title, items and click action is hard-coded. Let's refactor it to provide the re-usability we are looking for. Let's start off with having the title be specified in the view. We bind this to the string representation using the <strong>@</strong> binding.
<pre>&lt;menu title="My Menu"/&gt;

app.directive("menu", function () {
    return {
        restrict: 'E',
        replace: true,
        transclude: false,
        templateUrl: '/Views/Menu.html',
        scope: { title: '@' },
        link: function (scope) {

            scope.items= [
            { Text: 'Menu1', Value: 'Url1' },
            { Text: 'Menu2', Value: 'Url2' }
            ];

            scope.Click = function (index) {
                scope.selectedIndex = index;
                alert("Transitioning to " + scope.items[index].Value);
            };
         }
     };
});</pre>
The menu items would be more suitable to have in a controller in order to allow for reusing the directive with different MenuCtrls. To solve this we need to utilize the <strong>=</strong> binding.
<pre>&lt;menu title="My Menu" items="items"/&gt;
<span style="line-height:1.5;">
module.controller('AngularMenuCtrl', function ($scope) {
</span><span style="line-height:1.5;">     $scope.items = [
</span><span style="line-height:1.5;">           { Text: 'Page One', Value: 'Url1' },
</span><span style="line-height:1.5;">           { Text: 'Page Two', Value: 'Url2' }];
</span><span style="line-height:1.5;">});

<span style="line-height:1.5;">app.directive("menu", function () {
</span><span style="line-height:1.5;">    return {
</span><span style="line-height:1.5;">        restrict: 'E',
</span><span style="line-height:1.5;">        replace: true,
</span><span style="line-height:1.5;">        transclude: false,
</span><span style="line-height:1.5;">        templateUrl: '/Views/Menu.html',
</span><span style="line-height:1.5;">        scope: {
</span><span style="line-height:1.5;">            title: '@',
</span><span style="line-height:1.5;">            items: '='
</span><span style="line-height:1.5;">        },
</span><span style="line-height:1.5;">        link: function (scope) {</span></span> 
            scope.Click = function (index) {
                scope.selectedIndex = index;
                alert("Transitioning to " + scope.items[index].Value);
            };
         }
     };
});</pre>
There we go. For the click functionality we want every instance to re-use the selected menu item functionality (and any other menu base functionality) while at the same time have the ability to hook in their own custom click logic. We can achieve this by using the <strong>&amp;</strong> binding to pass a reference to a function that we later invoke.
<pre>&lt;menu title="My Menu" items="items" click="Click(index)"/&gt;

module.controller('AngularMenuCtrl', function ($scope) {

    $scope.items = [
           { Text: 'Menu1', Value: 'Url1' },
           { Text: 'Menu2', Value: 'Url2' }
    ];

    $scope.Click = function(index) {
        alert("Transitioning to " + $scope.items[index].Value);
    };
});
app.directive("menu", function () {
    return {
        restrict: 'E',
        replace: true,
        transclude: false,
        templateUrl: '/Views/Menu.html',
        scope: {
            title: '@',
            items: '=',
            click: '&amp;'
        },
        link: function (scope) {
            scope.Click = function (index) {
                scope.selectedIndex = index;
                scope.click({ index: index });
            };
        }
    };
});</pre>
When calling functions bound using <strong>&amp;</strong> binding, the parameters of the function needs to be sent in the form of an object { parameterName: value }.

And with this we have a fully working Menu directive ready for being re-used and expanded upon. Hope it was helpful!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>93</wp:post_id>
  <wp:post_date>2013-10-01 10:12:17</wp:post_date>
  <wp:post_date_gmt>2013-10-01 14:12:17</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="angularjs"><![CDATA[Angularjs]]></category>
  <wp:postmeta>
    <wp:meta_key>sharing_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
